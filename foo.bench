# The following doesn't work: if $foo_ir and $bar_ir aren't initialised
# then when we hit the $bar += $foo_ir in the middle of the loop for the
# first time, we trigger a load_int for $bar_ir from its backing SV.
# We don't write-back the shadow variable into the SV at the end of the
# loop (which we ought to cope with) and so the next time through the loop
# we're in the wrong state.
# my ($foo_ir, $bar_ir);
use integer;
# If we initialise explicitly here then we're OK since INT_VALID is then set
# by the time we're in the loop and so we don't have to reload from the SV
my $foo_ir = 0;
my $bar_ir = 0;

for ($foo_ir = 0; $foo_ir < 3000000; $foo_ir += 2) {
    $bar_ir += $foo_ir;
}
print "\$foo_ir = $foo_ir, \$bar_ir = $bar_ir\n";
#[local/src/B]nonesuch% time ./foo
#$foo_ir = 3000000, $bar_ir = -564363104
#2.260u 0.090s 0:02.44 96.3% 0+0k 0+0io 89pf+0w
#[local/src/B]nonesuch% time perl foo.pl
#$foo_ir = 3000000, $bar_ir = -564363104
#73.250u 0.090s 1:13.49 99.7% 0+0k 0+0io 130pf+0w
